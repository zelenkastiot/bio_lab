# üíª –ë12: –ò–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏—ò–∞ –Ω–∞ Nussinov —Ñ—É–Ω–∫—Ü–∏—ò–∞


````{admonition} –û–ø–∏—Å –Ω–∞ –±–∞—Ä–∞—ö–µ
:class: tip
–î–∞ —Å–µ –∏—Å–ø—Ä–æ–≥—Ä–∞–º–∏—Ä–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–æ—Ç –Ω–∞ Nussinov –∫–∞–∫–æ —Ñ—É–Ω–∫—Ü–∏—ò–∞ –≤–æ
python –∫–æ—ò–∞ –Ω–∞ –≤–ª–µ–∑ —ú–µ –¥–æ–±–∏–≤–∞ —Å—Ç—Ä–∏–Ω–≥ –æ–¥ –Ω—É–∫–ª–µ–æ—Ç–∏–¥–∏, –∞ –Ω–∞
–∏–∑–ª–µ–∑–µ —ú–µ —ò–∞ –¥–∞–≤–∞ –Ω–∏–≤–Ω–∞—Ç–∞ —Å–µ–∫—É–Ω–¥–∞—Ä–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞.

–í–ª–µ–∑ –Ω–µ–∫–∞ –±–∏–¥–µ —Å–ª–µ–¥–Ω–∞—Ç–∞ **tRNA** –º–æ–ª–µ–∫—É–ª–∞: <br>

```Python
ACCGCGGGGCGUCCGGCUCAGCUUGCCGCUGCGGAGC
GCCGCAGUAGCCGAAACUUCCGGCUCGGGCCGUGGGC
GGUCUCUAGUCGCCCCG 
```
````

## –ê–ª–≥–æ—Ä–∏—Ç–∞–º –Ω–∞ –ù—É—Å–∏–Ω–æ–≤ 

–ê–ª–≥–æ—Ä–∏—Ç–º–æ—Ç –Ω–∞ **–ù—É—Å–∏–Ω–æ–≤** –≥–æ —Ä–µ—à–∞–≤–∞ –ø—Ä–æ–±–ª–µ–º–æ—Ç —Å–æ *–ø—Ä–µ–¥–≤–∏–¥—É–≤–∞—ö–µ –Ω–∞ —Å–µ–∫—É–Ω–¥–∞—Ä–Ω–∏ –†–ù–ê —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Å–æ –º–∞–∫—Å–∏–º–∏–∑–∏—Ä–∞—ö–µ –Ω–∞ –±–∞–∑–Ω–∏—Ç–µ –ø–∞—Ä–æ–≤–∏*. 

–ò—Å—Ç–æ —Ç–∞–∫–∞ –≥–æ ‚Äû—Ä–µ—à–∞–≤–∞‚Äú –ø—Ä–æ–±–ª–µ–º–æ—Ç —Å–æ –ø—Ä–µ–¥–≤–∏–¥—É–≤–∞—ö–µ –Ω–∞ –Ω–µ–ø—Ä–µ–æ–¥–Ω–∏ —Å–µ–∫—É–Ω–¥–∞—Ä–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏. –û–≤–∞ —Å–µ –ø–æ—Å—Ç–∏–≥–Ω—É–≤–∞ —Å–æ –¥–æ–¥–µ–ª—É–≤–∞—ö–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç –Ω–∞ –Ω–∞—à–∞—Ç–∞ –≤–ª–µ–∑–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–æ —Ä–∞–º–∫–∏—Ç–µ –Ω–∞ $L \times L$ –º–∞—Ç—Ä–∏—Ü–∞—Ç–∞, $N_{ij}$. –ó–∞ –¥–∞ –≥–æ –Ω–∞–ø—Ä–∞–≤–∏—Ç–µ –æ–≤–∞, –∑–∞ —Å–µ–∫–æ—ò —Å–ø–∞—Ä–µ–Ω –∫–æ–º–ø–ª–µ—Ç –Ω–∞ –Ω—É–∫–ª–µ–æ—Ç–∏–¥–∏, –Ω–∏–µ –º—É –¥–∞–≤–∞–º–µ —Ä–µ–∑—É–ª—Ç–∞—Ç +1, –∞ –∑–∞ –¥—Ä—É–≥–∏, 0. –ü–æ—Ç–æ–∞ —Å–µ –æ–±–∏–¥—É–≤–∞–º–µ –¥–∞ –≥–∏ –∑–≥–æ–ª–µ–º–∏–º–µ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ –∏ –¥–∞ —Å–µ –ø–æ–≤–ª–µ—á–µ–º–µ –æ–¥ –Ω—É–∫–ª–µ–æ—Ç–∏–¥–∏—Ç–µ —à—Ç–æ –≥–æ –∑–≥–æ–ª–µ–º—É–≤–∞–∞—Ç –Ω–∞—à–∏–æ—Ç –≤–∫—É–ø–µ–Ω —Ä–µ–∑—É–ª—Ç–∞—Ç. –ó–∞ –¥–∞ –≥–∏ –∑–≥–æ–ª–µ–º–∏–º–µ –Ω–∞—à–∏—Ç–µ –±–∞–∑–Ω–∏ –ø–∞—Ä–æ–≤–∏, –ù—É—Å–∏–Ω–æ–≤ –Ω–∞–≤–µ–¥—É–≤–∞ —Å–∞–º–æ 4 –º–æ–∂–Ω–∏ –ø—Ä–∞–≤–∏–ª–∞ —à—Ç–æ –º–æ–∂–µ–º–µ –¥–∞ –≥–∏ –∫–æ—Ä–∏—Å—Ç–∏–º–µ –ø—Ä–∏ —Å–ø–æ—Ä–µ–¥—É–≤–∞—ö–µ –Ω–∞ –Ω—É–∫–ª–µ–æ—Ç–∏–¥–∏—Ç–µ.

–ì–ª–∞–≤–Ω–∏—Ç–µ –ø—Ä–µ—Å–º–µ—Ç–∫–∏ –Ω–∞ **–ù—É—Å–∏–Ω–æ–≤** —Å–µ —Ä–µ–∫—É—Ä–∑–∏–≤–Ω–∏ –∏ –≥–∏ –ø—Ä–µ—Å–º–µ—Ç—É–≤–∞–∞—Ç –Ω–∞—ò–¥–æ–±—Ä–∏—Ç–µ —Å–µ–∫—É–Ω–¥–∞—Ä–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –∑–∞ –º–∞–ª–∏ —Å—É–∫—Ü–µ—Å–∏–∏ –Ω–∞ –Ω—É–∫–ª–µ–æ—Ç–∏–¥–∏ —Å√® –¥–æ–¥–µ–∫–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–µ –ø–æ–≥–æ–ª–µ–º–∏.

```{figure} images/img2.gif
---
width: 25%
align: center
name: fig1 - gif
---
–í–∏–∑—É–µ–ª–Ω –ø—Ä–∏–∫–∞–∑ –∑–∞ –ø–æ–ª–Ω–µ—ö–µ –Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞—Ç–∞ (–§–∞–∑–∞ 1) 
```

–ê–ª–≥–æ—Ä–∏—Ç–∞–º–æ—Ç —Å–µ —Å–æ—Å—Ç–æ–∏ –æ–¥ –¥–≤–µ —Ñ–∞–∑–∏: 
- –§–∞–∑–∞ –Ω–∞ –ø–æ–ª–Ω–µ—ö–µ –Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞—Ç–∞
- –§–∞–∑–∞ –Ω–∞ –Ω–∞–≤—Ä–∞—ú–∞—ö–µ –Ω–∞–Ω–∞–∑–∞–¥ 

### 1. –§–∞–∑–∞ –Ω–∞ –ø–æ–ª–Ω–µ—ö–µ –Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞—Ç–∞

–ü—Ä–∞–≤–∏–ª–∞:
1. –î–æ–¥–∞–¥–µ—Ç–µ –Ω–µ–ø–∞—Ä–∏—Ä–∞–Ω–∞ –ø–æ–∑–∏—Ü–∏—ò–∞ $i$ –Ω–∞ –Ω–∞—ò–¥–æ–±—Ä–∞—Ç–∞ –ø–æ–¥—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–æ –Ω–∏–≤–æ $i + 1, j$
2. –î–æ–¥–∞–¥–µ—Ç–µ –Ω–µ–ø–∞—Ä–∏—Ä–∞–Ω–∞ –ø–æ–∑–∏—Ü–∏—ò–∞ $j$ –Ω–∞ –Ω–∞—ò–¥–æ–±—Ä–∞—Ç–∞ –ø–æ–¥—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞ —Å–ª–µ–¥–Ω–∏—Ü–∞—Ç–∞ $i, j ‚Äì 1$
3. –î–æ–¥–∞–¥–µ—Ç–µ —Å–ø–∞—Ä–µ–Ω–∏ –æ—Å–Ω–æ–≤–∏ $i ‚Äì j$ –≤–æ –Ω–∞—ò–¥–æ–±—Ä–∞—Ç–∞ –ø–æ–¥—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞ —Å–ª–µ–¥–Ω–∞—Ç–∞ $i + j, j ‚Äì 1$
4. –ö–æ–º–±–∏–Ω–∏—Ä–∞—ò—Ç–µ –¥–≤–µ –æ–ø—Ç–∏–º–∞–ª–Ω–∏ –ø–æ–¥—Å—Ç—Ä—É–∫—Ç—É—Ä–∏ $i, k$ –∏ $k + 1, j$


```{figure} images/img1.png
---
width: 85%
align: center
name: fig5 - rules
---
–í–∏–∑—É–µ–ª–µ–Ω –ø—Ä–∏–∫–∞–∑ –Ω–∞ —Å–∏—Ç–µ 4 –ø—Ä–∞–≤–∏–ª–∞
```


from Bio.Seq import Seq 
import numpy as np
import pandas as pd

sample = "ACCGCGGGGCGUCCGGCUCAGCUUGCCGCUGCGGAGCGCCGCAGUAGCCGAAACUUCCGGCUCGGGCCGUGGGCGGUCUCUAGUCGCCCCG"

input_dna = Seq(sample)
output_rna = input_dna.transcribe()

print("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—ò–∞")
print(f"–î–ù–ê:\n {input_dna}")
print(f"RNA:\n {output_rna}")

def fill(nm , rna):
    """
    –ü–æ–ø–æ–ª–Ω—É–≤–∞—ö–µ –Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞—Ç–∞ –ø–æ Nussinov algorithm
    """
    minimal_loop_length = 0
    for k in range(1, len(rna)):
        for i in range(len(rna) - k):
            j = i + k
            if j - i >= minimal_loop_length:
                down = nm[i + 1][j] # 1 –ø—Ä–∞–≤–∏–ª–æ: –¥–æ–ª–µ
                left = nm[i][j - 1] # 2 –ø—Ä–∞–≤–∏–ª–æ: –ª–µ–≤–æ
                diag = nm[i + 1][j - 1] + couple((rna[i], rna[j])) # 3 –ø—Ä–∞–≤–∏–ª–æ: –¥–∏—ò–∞–≥–æ–Ω–∞–ª–∞ –ª–µ–≤–æ –¥–æ–ª—É + –¥–∞–ª–∏ –µ –ø–∞—Ä –∏–ª–∏ –Ω–µ
                rc = max([nm[i][t] + nm[t + 1][j] for t in range(i, j)]) # 4 –ø—Ä–∞–≤–∏–ª–æ: –∫–æ–º–∏–±–∞—Ü–∏—ò–∞ –æ–¥ –¥–≤–µ –æ–ø—Ç–∏–º–∞–ª–Ω–∏ —Å—É–±—Å—Ç—Ä—É–∫—Ç—É—Ä–∏ (list comprehension)
                nm[i][j] = max(down, left, diag, rc) # –≤—Ä–∞—Ç–∏ –≥–æ –º–∞–∫—Å–∏–º—É–º–æ—Ç
            
            else:
                nm[i][j] = 0
    return nm

def couple(pair):
    """
    –í—Ä–∞—Ç–∏ True –∞–∫–æ –†–ù–ê –Ω—É–∫–ª–µ–æ—Ç–∏–¥–∏—Ç–µ —Å–µ –ø–∞—Ä–æ–≤–∏
    """
    pairs = {"A": "U", "U": "A", "G": "C", "C": "G"} # –ø—Ä–∞–≤–∏–ª–∞ –∑–∞ –∫–æ–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–æ—Å—Ç
    # –ø—Ä–æ–≤–µ—Ä–∫–∞
    if pair in pairs.items():
        return True
    
    return False

def init_matrix(rna):
    M = len(rna)
    # –∏–Ω–∏—Ü–∏—ò–∞–ª–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞
    nm = np.empty([M, M])
    nm[:] = np.NAN
    # –≥–ª–∞–≤–Ω–∞ –¥–∏—ò–∞–≥–æ–Ω–∞–ª–∞ –∏ –≤–µ–¥–Ω–∞—à –ø–æ–¥ –≥–ª–∞–≤–Ω–∞-–¥–∏—ò–∞–≥–æ–Ω–∞–ª–∞—Ç–∞
    nm[range(M), range(M)] = 0
    nm[range(1, len(rna)), range(len(rna) - 1)] = 0
    return nm

### 2. –§–∞–∑–∞ –∑–∞ –Ω–∞–≤—Ä–∞—ú–∞—ö–µ –Ω–∞–Ω–∞–∑–∞–¥

def traceback(nm, rna, fold, i, L):
    """
    –†–µ–∫—É—Ä–∑–∏—ò–∞: –ù–∞–≤—Ä–∞—ú–∞—ö–µ –Ω–∏–∑ –ø–æ–ø–æ–ª–Ω–µ—Ç–∞ Nussinov –º–∞—Ç—Ä–∏—Ü–∞ –∑–∞ –¥–∞ —Å–µ –Ω–∞—ò–¥–µ –æ–ø—Ç–∏–º–∞–ª–Ω–∞ –†–ù–ê —Å–µ–∫—É–Ω–¥–∞—Ä–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    """
    j = L

    if i < j:
        if nm[i][j] == nm[i + 1][j]: # 1 –ø—Ä–∞–≤–∏–ª–æ
            traceback(nm, rna, fold, i + 1, j)
        elif nm[i][j] == nm[i][j - 1]: # 2 –ø—Ä–∞–≤–∏–ª–æ
            traceback(nm, rna, fold, i, j - 1)
        elif nm[i][j] == nm[i + 1][j - 1] + couple((rna[i], rna[j])): # 3 –ø—Ä–∞–≤–∏–ª–æ
            fold.append((i, j))
            traceback(nm, rna, fold, i + 1, j - 1)
        else:
            for k in range(i + 1, j - 1):
                if nm[i][j] == nm[i, k] + nm[k + 1][j]: # 4 –ø—Ä–∞–≤–∏–ª–æ
                    traceback(nm, rna, fold, i, k)
                    traceback(nm, rna, fold, k + 1, j)
                    break

    return fold

def dot_write(rna, fold):
    dot = ["." for i in range(len(rna))]
    for s in fold:
        dot[min(s)] = "("
        dot[max(s)] = ")"
    return "".join(dot)

### –†–µ–∑—É–ª—Ç–∞—Ç –æ–¥ –∞–ª–≥–æ—Ä–∏—Ç–∞–º

print(output_rna)
print(f"–î–æ–ª–∂–∏–Ω–∞ –Ω–∞ –†–ù–ê —Å–µ–≥–º–µ–Ω—Ç: {len(output_rna)}")

rna = output_rna
nm = init_matrix(rna)
nm = fill(nm, rna)
 
fold = []
sec = traceback(nm, rna, fold, 0, len(rna) - 1)
    
res = dot_write(rna, fold)

names = [_ for _ in rna]
df = pd.DataFrame(nm, index = names, columns = names)
print(df, "\n", rna)
print(f"\n–ò–∑–ª–µ–∑ –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–æ –æ–±–ª–∏–∫ –Ω–∞ —Ç–æ—á–∫–∏: {res}")

## 3D –ø—Ä–∏–∫–∞–∑ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–æ—Ç

```{admonition} –®—Ç–æ –µ FornaContainer?
:class: tip
**FornaContainer** –µ –∞–ª–∞—Ç–∫–∞ —Ä–∞–∑–≤–∏–µ–Ω–∞ –æ–¥ *Dash* community –∫–∞–¥–µ —Å–µ –ø—Ä–∏–∫–∞–∂—É–≤–∞ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞–Ω –≥—Ä–∞—Ñ –∫–æ—ò —ò–∞ —Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∏—Ä–∞ —Å–µ–∫—É–Ω–¥–∞—Ä–Ω–∞—Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞ –Ω—É–∫–ª–µ–∏–Ω—Å–∫–∏ –∫–∏—Å–µ–ª–∏–Ω–∏ (–º–æ–∂–µ –¥–∞ –±–∏–¥–µ –∏ –†–ù–ê –∏ –î–ù–ê). 

–õ–∏–Ω–∫–æ—Ç –¥–æ –∞–ª–∞—Ç–∫–∞—Ç–∞ –µ —Å–ª–µ–¥–µ–Ω: https://dash-gallery.plotly.host/dash-forna-container/
```

–ò–∑–ª–µ–∑–æ—Ç –æ–¥ –ø—Ä–µ—Ç—Ö–æ–¥–Ω–∞—Ç–∞ —ú–µ–ª–∏—ò–∞ –≥–æ –¥–æ–¥–∞–¥–æ–≤ –∫–∞–∫–æ –Ω–æ–≤–∞ —Å—Ç—Ä—É—Ç—É—Ä–∞ –≤–æ –æ–≤–∞–∞ *Dash* –∞–ø–ª–∏–∫–∞—Ü–∏—ò–∞ –∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–æ—Ç –∑–∞ –Ω–∞—à–µ—Ç–æ –ø—Ä–µ–≤–∏—Ç—É–∫—É–≤–∞—ö–µ –±–µ—à–µ —Å–ª–µ–¥–Ω–æ: 

```{figure} images/img3.png
---
width: 85%
align: center
name: fig6 - 2nd struture tRNA
---
–í–∏–∑—É–µ–ª–µ–Ω –ø—Ä–∏–∫–∞–∑ –Ω–∞ —Å–µ–∫—É–Ω–¥–∞—Ä–¥–Ω–∞—Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞ –Ω–∞—à–∞—Ç–∞ tRNA
```